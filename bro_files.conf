# This conf file is based on accepting logs for files.log from Bro systems
input {
  file {
    type => "bro_files"
    sincedb_path => "/var/tmp/.bro_files_sincedb"
 
    #Edit the following path to reflect the location of your log files. You can also change the extension if you use something else
    path => "/nsm/bro/logs/current/files.log"
  }
}

filter {
  if [type] == "bro_files" {
    # This is the initial parsing of the log
    grok {
      match => [ "message", "(?<ts>(.*?))\t(?<fuid>(.*?))\t(?<tx_hosts>(.*?))\t(?<rx_hosts>(.*?))\t(?<conn_uids>(.*?))\t(?<source>(.*?))\t(?<depth>(.*?))\t(?<analyzers>(.*?))\t(?<mime_type>(.*?))\t(?<filename>(.*?))\t(?<duration>(.*?))\t(?<local_orig>(.*?))\t(?<is_orig>(.*?))\t(?<seen_bytes>(.*?))\t(?<total_bytes>(.*?))\t(?<missing_bytes>(.*?))\t(?<overflow_bytes>(.*?))\t(?<timedout>(.*?))\t(?<parent_fuid>(.*?))\t(?<md5>(.*?))\t(?<sha1>(.*?))\t(?<sha256>(.*?))\t(?<extracted>(.*))" ]
    }
	# Replace the host field with the host found in the bro log
    if [bro_host] {
      mutate {
        replace => [ "host", "%{bro_host}" ]
      }
    }
	# I renamed conn_uids to uid so that it is easy to pivot to all things tied to a connection
    mutate {
       rename => [ "conn_uids", "uid" ]
    }
	# If total_bytes is set to "-" change it to 0 so it is an integer
    if [total_bytes] == "-" {
      mutate {
        replace => [ "total_bytes", "0" ]
      }
    }
	# I recommend changing the field types below to integer so searches can do greater than or less than
	# and also so math functions can be ran against them
    mutate {
      convert => [ "id.orig_p", "integer" ]
      convert => [ "id.resp_p", "integer" ]
      convert => [ "total_bytes", "integer" ]
    }
    date {
      match => [ "ts", "UNIX" ]
    }
	# If filename exists run a frequency analysis against it.  In order for this to work you must have
	# freq.py and the corresponding frequency table in /opt/freq/.  This is a huge boost to security
	# and I highly recommend you set this up.  Example, if a frequency score less than 6 exists
	# then there is a likelihood that something malicious is happening.
	#
	# For higher accuracy, please generate your own frequency tables.  For questions on setup,
	# please refer to https://github.com/SMAPPER
	#
	# For files you can be specific and run certain frequency tables against certain file extensions.
  }
}

output {
  if [type] == "bro_files" {
    #stdout { codec => rubydebug }
    elasticsearch {
	  # Due to the volume of bro logs I like to save them to a seperate index.  This makes it easy to change retention
	  # You can uncomment the index line below if you would like all logs to be in the same logstash index
      index => "bro-%{+YYYY.MM.dd}"
    }
  }
}
