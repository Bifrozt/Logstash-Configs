# Author: Justin Henderson
# Email: jhenderson@tekrefresh.comes
# Last Update: 5/5/2016
#
# This conf file is based on accepting logs for conn.log from Bro systems
input {
  file {
    type => "bro_conn"
    sincedb_path => "/var/tmp/.bro_conn_sincedb"
 
    # Edit the following path to reflect the location of your log files. You can also change the extension if you use something else
    path => "/nsm/bro/logs/current/conn.log"
  }
}

filter {
  if [type] == "bro_conn" {
    # This is the initial parsing of the log
	csv {
      columns => ["ts","uid","SourceIP","SourcePort","DestinationIP","DestinationPort","Protocol","Service","Duration","OriginalBytes","RespondBytes","ConnectionState","LocalOrig","LocalRespond","MissedBytes","History","OriginalPackets","OriginalIPBytes","RespondPackets","RespondIPBytes","TunnelParents","OriginalCountryCode","RespondCountryCode","SensorName"]

    # If you use a custom delimiter, change the following value in between the quotes to your delimiter. Otherwise, insert a literal <tab> in between the two quotes on your logstash system, use a text editor like nano that doesn't convert tabs to spaces.
      separator => "	"
    }
    # Replace the host field with the host found in the bro log
    if [bro_host] {
      mutate {
        replace => [ "host", "%{bro_host}" ]
      }
    }
    # If duration is unspecified set it to zero so it is an integer
    if [duration] == "-" {
      mutate {
        replace => [ "Duration", "0" ]
      }
    }
    # If OriginalBytes is unspecified set it to zero so it is an integer
    if [OriginalBytes] == "-" {
      mutate {
        replace => [ "OriginalBytes", "0" ]
      }
    }
    # If MissedBytes is unspecified set it to zero so it is an integer
    if [MissedBytes] == "-" {
      mutate {
        replace => [ "MissedBytes", "0" ]
      }
    }
    # If OriginalIPBytes is unspecified set it to zero so it is an integer
    if [OriginalIPBytes] == "-" {
      mutate {
        replace => [ "OriginalIPBytes", "0" ]
      }
    }
    # If RespondBytes is unspecified set it to zero so it is an integer
    if [RespondBytes] == "-" {
      mutate {
        replace => [ "RespondBytes", "0" ]
      }
    }
    # If RespondIPBytes is unspecified set it to zero so it is an integer
    if [RespondIPBytes] == "-" {
      mutate {
        replace => [ "RespondIPBytes", "0" ]
      }
    }
    # I recommend changing the field types below to integer or floats so searches can do greater than or less than
    # and also so math functions can be ran against them
    mutate {
      convert => [ "SourcePort", "integer" ]
      convert => [ "DestinationPort", "integer" ]
      convert => [ "OriginalBytes", "integer" ]
      convert => [ "RespondBytes", "integer" ]
      convert => [ "MissedBytes", "integer" ]
      convert => [ "OriginalPackets", "integer" ]
      convert => [ "OriginalIPBytes", "integer" ]
      convert => [ "RespondPackets", "integer" ]
      convert => [ "RespondIPBytes", "integer" ]
      convert => [ "Duration", "float" ]
    }
    # Combine OriginalBytes and RespondBytes and save the value to total_bytes
    if [OriginalBytes] {
      if [RespondBytes] {
        ruby {
          code => "event['TotalBytes'] = event['OriginalBytes'] + event['RespondBytes']"
        }
      }
    }

    date {
      match => [ "ts", "UNIX" ]
    }
    translate {
      field => "ConnectionState"

      destination => "ConnectionStateDescription"

      dictionary => [
                    "S0", "Connection attempt seen, no reply",
                    "S1", "Connection established, not terminated",
                    "S2", "Connection established and close attempt by originator seen (but no reply from responder)",
                    "S3", "Connection established and close attempt by responder seen (but no reply from originator)",
                    "SF", "Normal SYN/FIN completion",
                    "REJ", "Connection attempt rejected",
                    "RSTO", "Connection established, originator aborted (sent a RST)",
                    "RSTR", "Established, responder aborted",
                    "RSTOS0", "Originator sent a SYN followed by a RST, we never saw a SYN-ACK from the responder",
                    "RSTRH", "Responder sent a SYN ACK followed by a RST, we never saw a SYN from the (purported) originator",
                    "SH", "Originator sent a SYN followed by a FIN, we never saw a SYN ACK from the responder (hence the connection was 'half' open)",
		    "SHR", "Responder sent a SYN ACK followed by a FIN, we never saw a SYN from the originator",
                    "OTH", "No SYN seen, just midstream traffic (a 'partial connection' that was not later closed)"
                    ]
    }
    # If you'd like for IP addresses to be resolved to DNS names uncomment this section 
    # On conn.log this can generate a TON of DNS requests
    #
    if [SourceIP] {
      geoip {
        source => "SourceIP"
        target => "SourceGeo"
      }
    }
    if [DestinationIP] {
      geoip {
        source => "DestinationIP"
        target => "DestinationGeo"
      }
    }
  }
}

output {
  if [type] == "bro_conn" {
    #stdout { codec => rubydebug }
    elasticsearch {
       # Due to the volume of bro logs I like to save them to a seperate index.  This makes it easy to change retention
       # You can uncomment the index line below if you would like all logs to be in the same logstash index
      index => "logstash-bro-%{+YYYY.MM.dd}"
    }
  }
}
