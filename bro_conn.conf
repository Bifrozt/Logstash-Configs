input {
	tcp {
		port => 6000
		type => "BRO_conn"
	}
}

filter {
	if [message] =~ /^#/ {
		drop {  }
	} else {
		if [type] == "BRO_conn" {
			grok {
				match => [ 
					"message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<SrcIP>(.*?))\t(?<SrcPort>(.*?))\t(?<DstIP>(.*?))\t(?<DstPort>(.*?))\t(?<proto>(.*?))\t(?<service>(.*?))\t(?<duration>(.*?))\t(?<orig_bytes>(.*?))\t(?<resp_bytes>(.*?))\t(?<conn_state>(.*?))\t(?<local_orig>(.*?))\t(?<missed_bytes>(.*?))\t(?<history>(.*?))\t(?<orig_pkts>(.*?))\t(?<orig_ip_bytes>(.*?))\t(?<resp_pkts>(.*?))\t(?<resp_ip_bytes>(.*?))\t(?<tunnel_parents>(.*?))\t(?<orig_cc>(.*?))\t(?<resp_cc>(.*?))\t(?<sensorname>(.*))",
					"message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<SrcIP>(.*?))\t(?<SrcPort>(.*?))\t(?<DstIP>(.*?))\t(?<DstPort>(.*?))\t(?<proto>(.*?))\t(?<service>(.*?))\t(?<duration>(.*?))\t(?<orig_bytes>(.*?))\t(?<resp_bytes>(.*?))\t(?<conn_state>(.*?))\t(?<local_orig>(.*?))\t(?<missed_bytes>(.*?))\t(?<history>(.*?))\t(?<orig_pkts>(.*?))\t(?<orig_ip_bytes>(.*?))\t(?<resp_pkts>(.*?))\t(?<resp_ip_bytes>(.*?))\t(%{NOTSPACE:tunnel_parents})"
				]
			}
			if [bro_host] {
				mutate {
					replace => [ "host", "%{bro_host}" ]
				}
			}
			mutate {
				add_tag => [ "BRO" ]
			}
			mutate {
				convert => [ "SrcPort", "integer" ]
				convert => [ "DstPort", "integer" ]
				convert => [ "orig_bytes", "integer" ]
				convert => [ "resp_bytes", "integer" ]
				convert => [ "missed_bytes", "integer" ]
				convert => [ "orig_pkts", "integer" ]
				convert => [ "orig_ip_bytes", "integer" ]
				convert => [ "resp_pkts", "integer" ]
				convert => [ "resp_ip_bytes", "integer" ]
			}
			date {
				match => [ "ts", "UNIX" ]
			}
			if [SrcIP]  {
				geoip {
					source => "[SrcIP]"
					#target => "geoip"
					#add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
					#add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
				}
				#mutate {
				#	convert => [ "[geoip][coordinates]", "float"]
				#} 
				#mutate {
				#	uppercase => [ "geoip.country_code2" ]
				#}
			}
			if [DstIP]  {
				geoip {
					source => "[DstIP]"
					#target => "geoip"
					#add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
					#add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
				}
				#mutate {
				#	convert => [ "[geoip][coordinates]", "float"]
				#} 
				#mutate {
				#	uppercase => [ "geoip.country_code2" ]
				#}
			}
			if [SrcIP] {
				if ![SrcIP-resolved] {
					mutate {
						add_field => [ "SrcIP-resolved", "%{SrcIP}" ]
					}
					dns {
						reverse => [ "SrcIP-resolved" ]
						action => "replace"
					}
				}
			}
			if [DstIP] {
				if ![DstIP-resolved] {
					mutate {
					add_field => [ "DstIP-resolved", "%{DstIP}" ]
					}
					dns {
						reverse => [ "DstIP-resolved" ]
						action => "replace"
					}
				}
			}
		}
	}
	
}

output {
	if [type] == "BRO_conn" {
		stdout { codec => rubydebug }
		elasticsearch {
			index => "bro-%{+YYYY.MM.dd}"
		}
	}
}
