# Author: Justin Henderson
# Email: jhenderson@tekrefresh.comes
# Last Update: 5/5/2016
#
# This conf file is based on accepting logs for suricata json events
input {
  file { 
    path => ["/nsm/sensor_data/ELKHunter-eth1/eve.json"]
    sincedb_path => ["/var/lib/logstash/suricata"]
    codec =>   json 
    type => "suricata" 
  }

}

filter {
  if [type] == "suricata" {
    date {
      match => [ "timestamp", "ISO8601" ]
    }
    if [event_type] == "fileinfo" {
      ruby {
        code => "if event['event_type'] == 'fileinfo'; event['fileinfo']['type']=event['fileinfo']['magic'].to_s.split(',')[0]; end;" 
      }
    }
    # I recommend renaming the fields below to be consistent with other log sources.  This makes it easy to "pivot" between logs
    mutate {
      rename => [ "src_ip", "SourceIP" ]
      rename => [ "dest_ip", "DestinationIP" ]
      rename => [ "src_port", "SourcePort" ]
      rename => [ "dest_port", "DestinationPort" ]
    }
    # This will translate the alert.severity field into a severity field of either High, Medium, or Low
    if [event_type] == "alert" {
      if [alert][severity] == 1 {
        mutate {
          add_field => { "severity" => "High" }
        }
      }
      if [alert][severity] == 2 {
        mutate {
          add_field => { "severity" => "Medium" }
        }
      }
      if [alert][severity] == 3 {
        mutate {
          add_field => { "severity" => "Low" }
        }
      }
      # If the alert is a Snort GPL alert break it apart for easier reading and categorization
      if [alert][signature] =~ "GPL " {
        # This will parse out the category type from the alert
        grok {
          match => { "[alert][signature]" => "GPL\s+%{DATA:category}\s" }
        }
        # This will store the category
        mutate {
          add_field => { "rule_type" => "Snort GPL" }
          lowercase => [ "category" ]
        }
      }
      # If the alert is an Emerging Threat alert break it apart for easier reading and categorization
      if [alert][signature] =~ "ET " {
        # This will parse out the category type from the alert
        grok {
          match => { "[alert][signature]" => "ET\s+%{DATA:category}\s" }
        }
        # This will store the category
        mutate {
          add_field => { "rule_type" => "Emerging Threats" }
          lowercase => [ "category" ]
        }
      }
      # This section adds URLs to lookup information about a rule online
      if [rule_type] == "Snort GPL" {
        mutate {
          add_field => [ "Signature_Info", "https://www.snort.org/search?query=%{[alert][gid]}-%{[alert][signature_id]}" ]
        }
      }
      if [rule_type] == "Emerging Threats" {
        mutate {
          add_field => [ "Signature_Info", "http://doc.emergingthreats.net/%{[alert][signature_id]}" ]
        }
      }
      if [alert][gid] == 1 {
        ruby {
          code => "signatureID = event['alert']['signature_id']
                   event['rule'] = `grep #{signatureID} /etc/nsm/rules/*.rules`"
        }
        grok {
          match => { "rule" => "%{DATA:rule_location}\:%{GREEDYDATA:rule}" }
        }
      }
    }
    # If SourceIP is set try to do a geoip lookup.  This will only save a geoip if the SourceIP is not a private IP address
    if [SourceIP]  {
      geoip {
        source => "SourceIP"
        target => "SourceGeo"		
      }
      # If you'd like to collect the DNS name for the SourceIP keep this section.  Caution, this can cause an attacker to go into hiding.
      # If you do not want reverse DNS lookups of IPs keep this uncommented.
      #if [event_type] != "dns" {
      #  mutate {
      #    add_field => { "SourceIP-resolved" => "%{SourceIP}" }
      #  }
      #  dns {
      #    reverse => [ "[SourceIP-resolved]" ]
      #    action => "replace"
      #  }
      #}
    }
    # If DestinationIP is set try to do a geoip lookup.  This will only save a geopip if the DestinationIP is not a private IP address
    if [DestinationGeo]  {
      geoip {
        source => "DestinationIP"
        target => "DestinationGeo"		
      }
      #If you'd like to collect the DNS name for the DestinationIP keep this section.  Caution, this can cause an attacker to go into hiding.
      # If you do not want reverse DNS lookups of IPs keep this uncommented.
      #if [event_type] != "dns" {
      #  mutate {
      #    add_field => { "DestinationIP-resolved" => "%{DestinationIP}" }
      #  }
      #  dns {
      #    reverse => [ "[DestinationIP-resolved]" ]
      #    action => "replace"
      #  }
      #}
    }
  }
}

output { 
  #stdout { codec => rubydebug }
  if [type] == "suricata" {
    elasticsearch {
    }
  }
}

