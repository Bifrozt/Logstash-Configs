# This conf file is based on accepting logs for dns.log from Bro systems
input {
  tcp {
    port => 6002
    type => "bro_dns"
  }
}

filter {
  if [type] == "bro_dns" {
    # This is the initial parsing of the log
    grok {
      match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<SrcIP>(.*?))\t(?<SrcPort>(.*?))\t(?<DstIP>(.*?))\t(?<DstPort>(.*?))\t(?<proto>(.*?))\t(?<trans_id>(.*?))\t(?<query>(.*?))\t(?<qclass>(.*?))\t(?<qclass_name>(.*?))\t(?<qtype>(.*?))\t(?<qtype_name>(.*?))\t(?<rcode>(.*?))\t(?<rcode_name>(.*?))\t(?<AA>(.*?))\t(?<TC>(.*?))\t(?<RD>(.*?))\t(?<RA>(.*?))\t(?<Z>(.*?))\t(?<answers>(.*?))\t(?<TTLs>(.*?))\t(?<rejected>(.*))" ]
    }
	# Replace the host field with the host found in the bro log
    if [bro_host] {
      mutate {
        replace => [ "host", "%{bro_host}" ]
      }
    }
	# I recommend changing the field types below to integer so searches can do greater than or less than
	# and also so math functions can be ran against them
    mutate {
      convert => [ "SrcPort", "integer" ]
      convert => [ "DstPort", "integer" ]
    }
    date {
      match => [ "ts", "UNIX" ]
    }
	# If query exists run a frequency analysis against it.  In order for this to work you must have
	# freq.py and the corresponding frequency table in /opt/freq/.  This is a huge boost to security
	# and I highly recommend you set this up.  Example, if a frequency score less than 6 exists
	# then there is a likelihood that something malicious is happening.
	#
	# For higher accuracy, please generate your own frequency tables.  For questions on setup,
	# please refer to https://github.com/SMAPPER
	
	# Recommended - This section attempts to parse out just the primary domain
	# Example: abc.domain.com would just be stored as domain.com
	# If you want to use the full domain comment this part out and change if[domain] below to if[query]
	grok {
	  match => [ "query", "(?<domain>\w*\.\w*$)" ]
	}
	# This part is the part the makes a call to freq_server.py
    if [domain] {
      ruby {
        code => "freq_query = event['domain']
		         event['freq_score'] = `/usr/bin/curl -s http://127.0.0.1:8080?cmd=measure\\tgt=#{freq_query}`"
      }
	  # This sets freq_score as a flot so it gets stored as a number
      mutate {
        convert => [ "freq_score", "float" ]
      }
    }
  }
}

output {
  if [type] == "bro_dns" {
    #stdout { codec => rubydebug }
    elasticsearch {
	  # Due to the volume of bro logs I like to save them to a seperate index.  This makes it easy to change retention
	  # You can uncomment the index line below if you would like all logs to be in the same logstash index
      index => "bro-%{+YYYY.MM.dd}"
    }
  }						 
}
