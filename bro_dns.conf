# Author: Justin Henderson
# Email: jhenderson@tekrefresh.comes
# Last Update: 5/5/2016
#
# This conf file is based on accepting logs for dns.log from Bro systems
input {
  file {
    type => "bro_dns"
    sincedb_path => "/var/tmp/.bro_dns_sincedb"
    # Edit the following path to reflect the location of your log files. You can also change the extension if you use something else
    path => "/nsm/bro/logs/current/dns.log"
  }
}

filter {
  if [type] == "bro_dns" {
    # This is the initial parsing of the log
    csv {
      columns => ["ts","uid","SourceIP","SourcePort","DestinationIP","DestinationPort","Protocol","TransactionID","Query","QueryClass","QueryClassName","QueryType","QueryTypeName","rcode","rcode_name","AA","TC","RD","RA","Z","Answers","TTLs","Rejected"]

      #If you use a custom delimiter, change the following value in between the quotes to your delimiter. Otherwise, insert a literal <tab> in between the two quotes on your logstash system, use a text editor like nano that doesn't convert tabs to spaces.
      separator => "	"
    }
    # Replace the host field with the host found in the bro log
    if [bro_host] {
      mutate {
        replace => [ "host", "%{bro_host}" ]
      }
    }
    # I recommend changing the field types below to integer so searches can do greater than or less than
    # and also so math functions can be ran against them
    mutate {
      convert => [ "SourcePort", "integer" ]
      convert => [ "DestinationPort", "integer" ]
      convert => [ "TransactionID", "integer" ]
      convert => [ "QueryClass", "integer" ]
      convert => [ "QueryType", "integer" ]
      convert => [ "rcode", "integer" ]
      lowercase => [ "Query" ]
    }
    date {
      match => [ "ts", "UNIX" ]
    }
    # If Query exists run a frequency analysis against it.  In order for this to work you must have
    # freq.py and the corresponding frequency table in /opt/freq/.  This is a huge boost to security
    # and I highly recommend you set this up.  Example, if a frequency score less than 6 exists
    # then there is a likelihood that something malicious is happening.
    #
    # For higher accuracy, please generate your own frequency tables.  For questions on setup,
    # please refer to https://github.com/SMAPPER
    if [QueryTypeName] == "A" or [QueryTypeName] == "AAAA" {
      ruby {
       code => "freq_query = URI.escape(event['Query']); event['FrequencyScore'] = `/usr/bin/curl -s http://127.0.0.1:10004?cmd=measure\\&tgt=#{freq_query}`"
      }
      mutate {
        convert => [ "FrequencyScore", "float" ]
      }
    }
  }
}

output {
  if [type] == "bro_dns" {
    #stdout { codec => rubydebug }
    elasticsearch {
      # Due to the volume of bro logs I like to save them to a seperate index.  This makes it easy to change retention
      # You can uncomment the index line below if you would like all logs to be in the same logstash index
      index => "logstash-bro-%{+YYYY.MM.dd}"
    }
  }						 
}
