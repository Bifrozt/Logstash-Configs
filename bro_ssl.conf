# Author: Justin Henderson
# Email: jhenderson@tekrefresh.comes
# Last Update: 5/5/2016
#
# This conf file is based on accepting logs for ssl.log from Bro systems
input {
  file {
    type => "bro_ssl"
    sincedb_path => "/var/tmp/.bro_ssl_sincedb" 
    # Edit the following path to reflect the location of your log files. You can also change the extension if you use something else
    path => "/nsm/bro/logs/current/ssl.log"
  }
}

filter {
  if [type] == "bro_ssl" {
   # This is the initial parsing of the log
    csv {
      columns => ["ts","uid","SourceIP","SourcePort","DestinationIP","DestinationPort","Version","Cipher","Curve","ServerName","Resumed","LastAlert","NextProtocol","Established","cert_chain_fuids","client_cert_chain_fuids","Subject","Issuer","ClientSubject","ClientIssuer","ValidationStatus"]
      separator => "	"
    }
    # Replace the host field with the host found in the bro log
    if [bro_host] {
      mutate {
        replace => [ "host", "%{bro_host}" ]
      }
    }
    mutate {
     gsub => [
       "Subject", "\\\\,", "|"
     ]
    }
    kv {
      include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "DC", "GN", "pseudonym", "serialNumber", "title", "initials" ]
      field_split => ","
      source => "Subject"
    }
    mutate {
      rename => { "CN" => "SubjectCommonName"}
      rename => { "C" => "SubjectCountryCode"}
      rename => { "O" => "SubjectOrganization"}
      rename => { "OU" => "SubjectOrganizationUnit"}
      rename => { "ST" => "SubjectState"}
      rename => { "SN" => "SubjectSurname"}
      rename => { "L" => "SubjectLocality"}
      rename => { "DC" => "SubjectDistinguishedName"}
      rename => { "GN" => "SubjectGivenName"}
      rename => { "pseudonym" => "SubjectPseudonym"}
      rename => { "serialNumber" => "SubjectSerialNumber"}
      rename => { "title" => "SubjectTitle"}
      rename => { "initials" => "SubjectInitials"}
    }
    # I recommend changing the field types below to integer so searches can do greater than or less than
    # and also so math functions can be ran against them
    mutate {
      convert => [ "SourcePort", "integer" ]
      convert => [ "DestinationPort", "integer" ]
    }
    date {
      match => [ "ts", "UNIX" ]
    }
    # If CHANGE_ME exists run a frequency analysis against it.  In order for this to work you must have
    # freq.py and the corresponding frequency table in /opt/freq/.  This is a huge boost to security
    # and I highly recommend you set this up.  Example, if a frequency score less than 6 exists
    # then there is a likelihood that something malicious is happening.
    #
    # For higher accuracy, please generate your own frequency tables.  For questions on setup,
    # please refer to https://github.com/SMAPPER
    if [SubjectCommonName] or [ServerName] != "-"{
      if [ServerName] != "-" {
        ruby {
          code => "freq_query = URI.escape(event['ServerName']); event['FrequencyScore'] = `/usr/bin/curl -s http://127.0.0.1:10004?cmd=measure\\&tgt=#{freq_query}`"
        }
        mutate {
          convert => [ "FrequencyScore", "float" ]
        }
      } else {
        ruby {
          code => "freq_query = URI.escape(event['SubjectCommonName']); event['FrequencyScore'] = `/usr/bin/curl -s http://127.0.0.1:10004?cmd=measure\\&tgt=#{freq_query}`"
        }
        mutate {
          convert => [ "FrequencyScore", "float" ]
        }
      }
    }
    if [SourceIP] {
      geoip {
        source => "SourceIP"
        target => "SourceGeo"
      }
    }
    if [DestinationIP]{
      geoip {
        source => "DestinationIP"
        target => "DestinationGeo"
      }
    }
  }	
}

output {
  if [type] == "bro_ssl" {
    #stdout { codec => rubydebug }
    elasticsearch {
      # Due to the volume of bro logs I like to save them to a seperate index.  This makes it easy to change retention
      # You can uncomment the index line below if you would like all logs to be in the same logstash index
      index => "logstash-bro-%{+YYYY.MM.dd}"
    }
  }
}
