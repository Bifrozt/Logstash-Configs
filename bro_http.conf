# This conf file is based on accepting logs for http.log from Bro systems
input {
  tcp {
    port => 6004
    type => "bro_http"
  }
}

filter {
  if [type] == "bro_http" {
    # This is the initial parsing of the log
    grok {
      match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<SrcIP>(.*?))\t(?<SrcPort>(.*?))\t(?<DstIP>(.*?))\t(?<DstPort>(.*?))\t(?<trans_depth>(.*?))\t(?<method>(.*?))\t(?<bro_host>(.*?))\t(?<uri>(.*?))\t(?<referrer>(.*?))\t(?<user_agent>(.*?))\t(?<request_body_len>(.*?))\t(?<response_body_len>(.*?))\t(?<status_code>(.*?))\t(?<status_msg>(.*?))\t(?<info_code>(.*?))\t(?<info_msg>(.*?))\t(?<filename>(.*?))\t(?<http_tags>(.*?))\t(?<username>(.*?))\t(?<password>(.*?))\t(?<proxied>(.*?))\t(?<orig_fuids>(.*?))\t(?<orig_mime_types>(.*?))\t(?<resp_fuids>(.*?))\t(?<resp_mime_types>(.*))" ]
    }
	# Replace the host field with the host found in the bro log
    if [bro_host] {
      mutate {
        replace => [ "host", "%{bro_host}" ]
      }
    }
	# I recommend changing the field types below to integer so searches can do greater than or less than
	# and also so math functions can be ran against them
    mutate {
      convert => [ "SrcPort", "integer" ]
      convert => [ "DstPort", "integer" ]
    }
    date {
      match => [ "ts", "UNIX" ]
    }
	# I recommend renaming user_agent to UserAgent to be more consistent with naming of other log sources
    mutate {
      rename => [ "user_agent", "UserAgent" ]
    }
	# If SrcIP is set try to do a geoip lookup.  This will only save a geoip if the SrcIP is not a private IP address
	if [SrcIP]  {
      geoip {
        source => "[SrcIP]"
      }
    }
	# If DstIP is set try to do a geoip lookup.  This will only save a geopip if the DstIP is not a private IP address
    if [DstIP]  {
      geoip {
        source => "[DstIP]"
      }
    }
	# If SrcIP is set try to do a DNS reverse lookup
    if [SrcIP] {
      if ![SrcIP-resolved] {
        mutate {
          add_field => [ "SrcIP-resolved", "%{SrcIP}" ]
        }
        dns {
          reverse => [ "SrcIP-resolved" ]
          action => "replace"
        }
      }
    }
	# If DstIP is set try to do a DNS reverse lookup
    if [DstIP] {
      if ![DstIP-resolved] {
        mutate {
          add_field => [ "DstIP-resolved", "%{DstIP}" ]
        }
        dns {
          reverse => [ "DstIP-resolved" ]
          action => "replace"
        }
      }
    }
	# I recommend renaming username to Username to be more consistent with naming of other log sources
    mutate {
      rename => [ "username", "Username" ]
      remove_field => [ "bro_host" ]
    }
	# If uri exists run a frequency analysis against it.  In order for this to work you must have
	# freq.py and the corresponding frequency table in /opt/freq/.  This is a huge boost to security
	# and I highly recommend you set this up.  Example, if a frequency score less than 6 exists
	# then there is a likelihood that something malicious is happening.
	#
	# For higher accuracy, please generate your own frequency tables.  For questions on setup,
	# please refer to https://github.com/SMAPPER
    if [uri] {
      ruby {
        code => "event['freq_score'] = `/opt/freq/freq.py -m '%{query}' -M 10 /opt/freq/uri.freq`"
      }
    }
  }
}

output {
  if [type] == "bro_http" {
    #stdout { codec => rubydebug }
    elasticsearch {
	  # Due to the volume of bro logs I like to save them to a seperate index.  This makes it easy to change retention
	  # You can uncomment the index line below if you would like all logs to be in the same logstash index
      index => "bro-%{+YYYY.MM.dd}"
    }
  }
}
