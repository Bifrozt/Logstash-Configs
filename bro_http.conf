input {
	tcp {
		port => 6004
		type => "BRO_http"
	}
}

filter {
	if [type] == "BRO_http" {
		grok {
			match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<SrcIP>(.*?))\t(?<SrcPort>(.*?))\t(?<DstIP>(.*?))\t(?<DstPort>(.*?))\t(?<trans_depth>(.*?))\t(?<method>(.*?))\t(?<bro_host>(.*?))\t(?<uri>(.*?))\t(?<referrer>(.*?))\t(?<user_agent>(.*?))\t(?<request_body_len>(.*?))\t(?<response_body_len>(.*?))\t(?<status_code>(.*?))\t(?<status_msg>(.*?))\t(?<info_code>(.*?))\t(?<info_msg>(.*?))\t(?<filename>(.*?))\t(?<http_tags>(.*?))\t(?<username>(.*?))\t(?<password>(.*?))\t(?<proxied>(.*?))\t(?<orig_fuids>(.*?))\t(?<orig_mime_types>(.*?))\t(?<resp_fuids>(.*?))\t(?<resp_mime_types>(.*))" ]
		}
		if [bro_host] {
			mutate {
				replace => [ "host", "%{bro_host}" ]
			}
		}
		mutate {
			add_tag => [ "BRO" ]
		}
		mutate {
			convert => [ "SrcPort", "integer" ]
			convert => [ "DstPort", "integer" ]
		}
		date {
			match => [ "ts", "UNIX" ]
		}
		mutate {
			rename => [ "user_agent", "UserAgent" ]
		}
		if [DstIP]  {
			geoip {
				source => "[DstIP]"
			}
		}
		if [SrcIP] {
			if ![SrcIP-resolved] {
				mutate {
					add_field => [ "SrcIP-resolved", "%{SrcIP}" ]
				}
				dns {
					reverse => [ "SrcIP-resolved" ]
					action => "replace"
				}
			}
		}
		if [DstIP] {
			if ![DstIP-resolved] {
				mutate {
					add_field => [ "DstIP-resolved", "%{DstIP}" ]
				}
				dns {
					reverse => [ "DstIP-resolved" ]
					action => "replace"
				}
			}
		}
	  mutate {
		rename => [ "username", "Username" ]
		remove_field => [ "bro_host" ]
	  }
	}
	
}

output {
	if [type] == "BRO_http" {
		elasticsearch {
			cluster => "heartland"
			protocol => "http"
			embedded => false
			index => "bro-%{+YYYY.MM.dd}"
		}
	}
}