# Author: Justin Henderson
# Email: jhenderson@tekrefresh.comes
# Last Update: 5/5/2016
#
# This conf file is based on accepting logs for http.log from Bro systems
input {
  file {
    type => "bro_http"
    sincedb_path => "/var/tmp/.bro_http_sincedb" 
    # Edit the following path to reflect the location of your log files. You can also change the extension if you use something else
    path => "/nsm/bro/logs/current/http_eth1.log"
  }
}

filter {
  if [type] == "bro_http" {
    grok {
      match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<SourceIP>(.*?))\t(?<SourcePort>(.*?))\t(?<DestinationIP>(.*?))\t(?<DestinationPort>(.*?))\t(?<TransDepth>(.*?))\t(?<Method>(.*?))\t(?<VirtualHost>(.*?))\t(?<URI>(.*?))\t(?<referrer>(.*?))\t(?<UserAgent>(.*?))\t(?<RequestBodyLength>(.*?))\t(?<ResponseBodyLength>(.*?))\t(?<StatusCode>(.*?))\t(?<StatusMessage>(.*?))\t(?<InfoCode>(.*?))\t(?<InfoMessage>(.*?))\t(?<filename>(.*))\t(?<tags>(.*))\t(?<Username>(.*))\t(?<Password>(.*))\t(?<proxied>(.*))\t(?<orig_fuids>(.*))\t(?<orig_mime_types>(.*))\t(?<resp_fuids>(.*))\t(?<resp_mime_types>(.*))" ]
    }
    # I recommend changing the field types below to integer so searches can do greater than or less than
    # and also so math functions can be ran against them
    mutate {
      convert => [ "SourcePort", "integer" ]
      convert => [ "DestinationPort", "integer" ]
      convert => [ "TransDepth", "integer" ]
      convert => [ "RequestBodyLength", "integer" ]
      convert => [ "ResponseBodyLength", "integer" ]
      convert => [ "StatusCode", "integer" ]
      convert => [ "InfoCode", "integer" ]
    }
    date {
      match => [ "ts", "UNIX" ]
    }
    # If SourceIP is set try to do a geoip lookup.  This will only save a geoip if the SourceIP is not a private IP address
    if [SourceIP] and [type] == "bro_http" {
      geoip {
        source => "[SourceIP]"
	target => "SourceGeo"
      }
    }
    # If DestinationIP is set try to do a geoip lookup.  This will only save a geopip if the DestinationIP is not a private IP address
    if [DestinationIP] and [type] == "bro_http"  {
      geoip {
        source => "[DestinationIP]"
	target => "DestinationGeo"
      }
    }
    mutate {
      add_field => { "DestinationIPResolved" => "%{DestinationIP}" }
    }
    dns {
      reverse => [ "[DestinationIPResolved]" ]
      action => "replace"
    }
    mutate {
      add_field => { "SourceIPResolved" => "%{SourceIP}" }
    }
    dns {
      reverse => [ "[SourceIPResolved]" ]
      action => "replace"
    }

    # If uri exists run a frequency analysis against it.  In order for this to work you must have
    # freq.py and the corresponding frequency table in /opt/freq/.  This is a huge boost to security
    # and I highly recommend you set this up.  Example, if a frequency score less than 6 exists
    # then there is a likelihood that something malicious is happening.
    #
    # For higher accuracy, please generate your own frequency tables.  For questions on setup,
    # please refer to https://github.com/SMAPPER
    if [VirtualHost]{
      ruby {
       code => "freq_query = URI.escape(event['VirtualHost']); event['FrequencyScore'] = `/usr/bin/curl -s http://127.0.0.1:10002?cmd=measure\\&tgt=#{freq_query}`"
      }
      mutate {
        convert => [ "FrequencyScore", "float" ]
      }
    }
  }
}

output {
  if [type] == "bro_http" {
    #stdout { codec => rubydebug }
    elasticsearch {
      # Due to the volume of bro logs I like to save them to a seperate index.  This makes it easy to change retention
      # You can uncomment the index line below if you would like all logs to be in the same logstash index
      index => "logstash-bro-%{+YYYY.MM.dd}"
    }
  }
}
