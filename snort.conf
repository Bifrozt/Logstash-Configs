
input {
	udp {
		port => 5141
		type => snort
	}
}
filter {
	if [type] == "snort" {
		grok {
			match => { "message" => "\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+{%{DATA:protocol}}\s+%{IPV4:SrcIp}:%{INT:SrcPort}\s+->\s+%{IPV4:DstIp}:%{INT:DstPort}%{GREEDYDATA:message}"}
		}
		mutate {
			add_field => { "SrcIP-resolved" => "%{SrcIp}" }
		}
		dns {
			reverse => [ "[SrcIP-resolved]" ]
			action => "replace"
		}
		geoip {
			source => "[SrcIp]"
			target => "SrcGeo"
		}
		mutate {
			add_field => { "DstIP-resolved" => "%{DstIp}" }
		}
		dns {
			reverse => [ "[DstIP-resolved]" ]
			action => "replace"
		}
		geoip {
			source => "[DstIp]"
			target => "DstGeo"
		}
		if [alert] =~ "GPL " {
			grok {
				match => { "alert" => "GPL\s+%{DATA:category}\s" }
			}
			mutate {
				add_field => { "rule_type" => "Snort GPL" }
				lowercase => [ "category"]
				}
		}
		if [alert] =~ "ET " {
			grok {
				match => { "alert" => "ET\s+%{DATA:category}\s" }
			}
			mutate {
				add_field => { "rule_type" => "Emerging Threats" }
				lowercase => [ "category"]
			}
		}
		mutate {
			convert => [ "SrcPort", "integer" ]
			convert => [ "DstPort", "integer" ]
			remove_field => [ "message"]
		}
		translate {
			field => "priority"
			destination => "severity"
			dictionary => [
				"1", "High",
				"2", "Medium",
				"3", "Low"
			]
		}

		if [rule_type] == "Snort GPL" {
			mutate {
				add_field => [ "Signature_Info", "https://www.snort.org/search?query=%{gid}-%{sid}" ]
			}
		}
		if [rule_type] == "Emerging Threats" {
			mutate {
				add_field => [ "Signature_Info", "http://doc.emergingthreats.net/%{sid}" ]
			}
		}
	}
}

output {
    if [type] == "snort" {
		stdout { codec => rubydebug }
    }
	if [type] == "snort" {
		elasticsearch {
			cluster => "heartland"
			protocol => "http"
			embedded => false
		}
	}
}

